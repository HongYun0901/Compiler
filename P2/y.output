Terminals which are not used

   SEMICOLON
   BREAK
   CASE
   CLASS
   CONTINUE
   DO
   EXIT
   FALSE
   _NULL
   REPEAT
   TRUE
   TYPE


State 33 conflicts: 1 shift/reduce
State 39 conflicts: 1 shift/reduce
State 47 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 114 conflicts: 9 shift/reduce
State 116 conflicts: 1 shift/reduce
State 118 conflicts: 1 reduce/reduce
State 122 conflicts: 1 shift/reduce
State 130 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 144 conflicts: 1 shift/reduce
State 164 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 @1: /* empty */

    2 PROGRAM: OBJECT ID @1 OBJ_BLOCK

    3 @2: /* empty */

    4 FUNCTION: DEF ID @2 '(' ARGS ')' FUNCTION_OPTIONAL BLOCK

    5 FUNCTION_OPTIONAL: /* empty */
    6                  | ':' DATA_TYPE

    7 FUNCTION_INVOCATION: ID '(' COMMA_SEP_EXPR ')'

    8 COMMA_SEP_EXPR: /* empty */
    9               | EXPR ',' COMMA_SEP_EXPR
   10               | EXPR

   11 ARGS: /* empty */
   12     | ARG ',' ARGS
   13     | ARG

   14 ARG: ID ':' DATA_TYPE

   15 STMTS: STMT
   16      | STMT STMTS
   17      | /* empty */

   18 STMT: SIMPLE_STMT
   19     | BLOCK
   20     | CONDITIONAL_STMT
   21     | LOOP_STMT

   22 V_DECLARE: VAL_DECLARE
   23          | VAR_DECLARE

   24 SIMPLE_STMT: V_DECLARE
   25            | RETURN
   26            | RETURN EXPR
   27            | ID ASSIGN EXPR
   28            | ID '[' EXPR ']' ASSIGN EXPR
   29            | PRINT EXPR
   30            | PRINTLN EXPR
   31            | READ ID
   32            | EXPR

   33 @3: /* empty */

   34 BLOCK: '{' @3 STMTS '}'

   35 OBJ_CONTENTS: /* empty */
   36             | FUNCTION OBJ_CONTENTS
   37             | V_DECLARE OBJ_CONTENTS

   38 @4: /* empty */

   39 OBJ_BLOCK: '{' @4 OBJ_CONTENTS '}'

   40 VAL_DECLARE: VAL ID ASSIGN EXPR
   41            | VAL ID ':' DATA_TYPE ASSIGN EXPR

   42 VAR_DECLARE: VAR ID ASSIGN EXPR
   43            | VAR ID ':' DATA_TYPE
   44            | VAR ID ':' DATA_TYPE ASSIGN EXPR
   45            | VAR ID ':' DATA_TYPE '[' INT_VALUE ']'
   46            | VAR ID

   47 EXPR: '(' EXPR ')'
   48     | ID
   49     | '-' EXPR
   50     | FUNCTION_INVOCATION
   51     | EXPR '+' EXPR
   52     | EXPR '-' EXPR
   53     | EXPR '*' EXPR
   54     | EXPR '/' EXPR
   55     | EXPR '%' EXPR
   56     | EXPR OR_OP EXPR
   57     | EXPR AND_OP EXPR
   58     | EXPR LT EXPR
   59     | EXPR LE EXPR
   60     | EXPR EQ EXPR
   61     | EXPR GT EXPR
   62     | EXPR GE EXPR
   63     | EXPR NE EXPR
   64     | NOT EXPR
   65     | ID '[' EXPR ']'
   66     | VALUE

   67 DATA_TYPE: CHAR
   68          | STRING
   69          | INT
   70          | BOOLEAN
   71          | FLOAT

   72 VALUE: STRING_VALUE
   73      | INT_VALUE
   74      | BOOL_VALUE
   75      | FLOAT_VALUE
   76      | CHAR_VALUE

   77 CONDITIONAL_STMT: IF_STMT
   78                 | IF_STMT ELSE_STMT

   79 @5: /* empty */

   80 IF_STMT: IF '(' EXPR ')' @5 SIMPLE_STMT
   81        | IF '(' EXPR ')' BLOCK

   82 @6: /* empty */

   83 ELSE_STMT: ELSE @6 SIMPLE_STMT
   84          | ELSE BLOCK
   85          | ELSE IF_STMT
   86          | ELSE IF_STMT ELSE_STMT

   87 LOOP_STMT: WHILE_STMT
   88          | FOR_STMT

   89 @7: /* empty */

   90 WHILE_STMT: WHILE '(' EXPR ')' @7 SIMPLE_STMT
   91           | WHILE '(' EXPR ')' BLOCK

   92 @8: /* empty */

   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' EXPR TO EXPR ')' BLOCK


Terminals, with rules where they appear

$end (0) 0
'%' (37) 55
'(' (40) 4 7 47 80 81 90 91 93 94
')' (41) 4 7 47 80 81 90 91 93 94
'*' (42) 53
'+' (43) 51
',' (44) 9 12
'-' (45) 49 52 93 94
'/' (47) 54
':' (58) 6 14 41 43 44 45
'[' (91) 28 45 65
']' (93) 28 45 65
'{' (123) 34 39
'}' (125) 34 39
error (256)
SEMICOLON (258)
BOOLEAN (259) 70
BREAK (260)
CHAR (261) 67
CASE (262)
CLASS (263)
CONTINUE (264)
DEF (265) 4
DO (266)
ELSE (267) 83 84 85 86
EXIT (268)
FALSE (269)
FLOAT (270) 71
FOR (271) 93 94
IF (272) 80 81
INT (273) 69
_NULL (274)
OBJECT (275) 2
PRINT (276) 29
PRINTLN (277) 30
READ (278) 31
REPEAT (279)
RETURN (280) 25 26
STRING (281) 68
TO (282) 93 94
TRUE (283)
TYPE (284)
VAL (285) 40 41
VAR (286) 42 43 44 45 46
WHILE (287) 90 91
ASSIGN (288) 27 28 40 41 42 44
BOOL_VALUE (289) 74
INT_VALUE (290) 45 73
STRING_VALUE (291) 72
FLOAT_VALUE (292) 75
ID (293) 2 4 7 14 27 28 31 40 41 42 43 44 45 46 48 65 93 94
CHAR_VALUE (294) 76
OR_OP (295) 56
AND_OP (296) 57
NOT (297) 64
NE (298) 63
GE (299) 62
GT (300) 61
EQ (301) 60
LE (302) 59
LT (303) 58 93 94
UMINUS (304)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
PROGRAM (64)
    on left: 2, on right: 0
@1 (65)
    on left: 1, on right: 2
FUNCTION (66)
    on left: 4, on right: 36
@2 (67)
    on left: 3, on right: 4
FUNCTION_OPTIONAL (68)
    on left: 5 6, on right: 4
FUNCTION_INVOCATION (69)
    on left: 7, on right: 50
COMMA_SEP_EXPR (70)
    on left: 8 9 10, on right: 7 9
ARGS (71)
    on left: 11 12 13, on right: 4 12
ARG (72)
    on left: 14, on right: 12 13
STMTS (73)
    on left: 15 16 17, on right: 16 34
STMT (74)
    on left: 18 19 20 21, on right: 15 16
V_DECLARE (75)
    on left: 22 23, on right: 24 37
SIMPLE_STMT (76)
    on left: 24 25 26 27 28 29 30 31 32, on right: 18 80 83 90 93
BLOCK (77)
    on left: 34, on right: 4 19 81 84 91 94
@3 (78)
    on left: 33, on right: 34
OBJ_CONTENTS (79)
    on left: 35 36 37, on right: 36 37 39
OBJ_BLOCK (80)
    on left: 39, on right: 2
@4 (81)
    on left: 38, on right: 39
VAL_DECLARE (82)
    on left: 40 41, on right: 22
VAR_DECLARE (83)
    on left: 42 43 44 45 46, on right: 23
EXPR (84)
    on left: 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
    65 66, on right: 9 10 26 27 28 29 30 32 40 41 42 44 47 49 51 52
    53 54 55 56 57 58 59 60 61 62 63 64 65 80 81 90 91 93 94
DATA_TYPE (85)
    on left: 67 68 69 70 71, on right: 6 14 41 43 44 45
VALUE (86)
    on left: 72 73 74 75 76, on right: 66
CONDITIONAL_STMT (87)
    on left: 77 78, on right: 20
IF_STMT (88)
    on left: 80 81, on right: 77 78 85 86
@5 (89)
    on left: 79, on right: 80
ELSE_STMT (90)
    on left: 83 84 85 86, on right: 78 86
@6 (91)
    on left: 82, on right: 83
LOOP_STMT (92)
    on left: 87 88, on right: 21
WHILE_STMT (93)
    on left: 90 91, on right: 87
@7 (94)
    on left: 89, on right: 90
FOR_STMT (95)
    on left: 93 94, on right: 88
@8 (96)
    on left: 92, on right: 93


state 0

    0 $accept: . PROGRAM $end

    OBJECT  shift, and go to state 1

    PROGRAM  go to state 2


state 1

    2 PROGRAM: OBJECT . ID @1 OBJ_BLOCK

    ID  shift, and go to state 3


state 2

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 4


state 3

    2 PROGRAM: OBJECT ID . @1 OBJ_BLOCK

    $default  reduce using rule 1 (@1)

    @1  go to state 5


state 4

    0 $accept: PROGRAM $end .

    $default  accept


state 5

    2 PROGRAM: OBJECT ID @1 . OBJ_BLOCK

    '{'  shift, and go to state 6

    OBJ_BLOCK  go to state 7


state 6

   39 OBJ_BLOCK: '{' . @4 OBJ_CONTENTS '}'

    $default  reduce using rule 38 (@4)

    @4  go to state 8


state 7

    2 PROGRAM: OBJECT ID @1 OBJ_BLOCK .

    $default  reduce using rule 2 (PROGRAM)


state 8

   39 OBJ_BLOCK: '{' @4 . OBJ_CONTENTS '}'

    DEF  shift, and go to state 9
    VAL  shift, and go to state 10
    VAR  shift, and go to state 11

    $default  reduce using rule 35 (OBJ_CONTENTS)

    FUNCTION      go to state 12
    V_DECLARE     go to state 13
    OBJ_CONTENTS  go to state 14
    VAL_DECLARE   go to state 15
    VAR_DECLARE   go to state 16


state 9

    4 FUNCTION: DEF . ID @2 '(' ARGS ')' FUNCTION_OPTIONAL BLOCK

    ID  shift, and go to state 17


state 10

   40 VAL_DECLARE: VAL . ID ASSIGN EXPR
   41            | VAL . ID ':' DATA_TYPE ASSIGN EXPR

    ID  shift, and go to state 18


state 11

   42 VAR_DECLARE: VAR . ID ASSIGN EXPR
   43            | VAR . ID ':' DATA_TYPE
   44            | VAR . ID ':' DATA_TYPE ASSIGN EXPR
   45            | VAR . ID ':' DATA_TYPE '[' INT_VALUE ']'
   46            | VAR . ID

    ID  shift, and go to state 19


state 12

   36 OBJ_CONTENTS: FUNCTION . OBJ_CONTENTS

    DEF  shift, and go to state 9
    VAL  shift, and go to state 10
    VAR  shift, and go to state 11

    $default  reduce using rule 35 (OBJ_CONTENTS)

    FUNCTION      go to state 12
    V_DECLARE     go to state 13
    OBJ_CONTENTS  go to state 20
    VAL_DECLARE   go to state 15
    VAR_DECLARE   go to state 16


state 13

   37 OBJ_CONTENTS: V_DECLARE . OBJ_CONTENTS

    DEF  shift, and go to state 9
    VAL  shift, and go to state 10
    VAR  shift, and go to state 11

    $default  reduce using rule 35 (OBJ_CONTENTS)

    FUNCTION      go to state 12
    V_DECLARE     go to state 13
    OBJ_CONTENTS  go to state 21
    VAL_DECLARE   go to state 15
    VAR_DECLARE   go to state 16


state 14

   39 OBJ_BLOCK: '{' @4 OBJ_CONTENTS . '}'

    '}'  shift, and go to state 22


state 15

   22 V_DECLARE: VAL_DECLARE .

    $default  reduce using rule 22 (V_DECLARE)


state 16

   23 V_DECLARE: VAR_DECLARE .

    $default  reduce using rule 23 (V_DECLARE)


state 17

    4 FUNCTION: DEF ID . @2 '(' ARGS ')' FUNCTION_OPTIONAL BLOCK

    $default  reduce using rule 3 (@2)

    @2  go to state 23


state 18

   40 VAL_DECLARE: VAL ID . ASSIGN EXPR
   41            | VAL ID . ':' DATA_TYPE ASSIGN EXPR

    ASSIGN  shift, and go to state 24
    ':'     shift, and go to state 25


state 19

   42 VAR_DECLARE: VAR ID . ASSIGN EXPR
   43            | VAR ID . ':' DATA_TYPE
   44            | VAR ID . ':' DATA_TYPE ASSIGN EXPR
   45            | VAR ID . ':' DATA_TYPE '[' INT_VALUE ']'
   46            | VAR ID .

    ASSIGN  shift, and go to state 26
    ':'     shift, and go to state 27

    $default  reduce using rule 46 (VAR_DECLARE)


state 20

   36 OBJ_CONTENTS: FUNCTION OBJ_CONTENTS .

    $default  reduce using rule 36 (OBJ_CONTENTS)


state 21

   37 OBJ_CONTENTS: V_DECLARE OBJ_CONTENTS .

    $default  reduce using rule 37 (OBJ_CONTENTS)


state 22

   39 OBJ_BLOCK: '{' @4 OBJ_CONTENTS '}' .

    $default  reduce using rule 39 (OBJ_BLOCK)


state 23

    4 FUNCTION: DEF ID @2 . '(' ARGS ')' FUNCTION_OPTIONAL BLOCK

    '('  shift, and go to state 28


state 24

   40 VAL_DECLARE: VAL ID ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 39
    VALUE                go to state 40


state 25

   41 VAL_DECLARE: VAL ID ':' . DATA_TYPE ASSIGN EXPR

    BOOLEAN  shift, and go to state 41
    CHAR     shift, and go to state 42
    FLOAT    shift, and go to state 43
    INT      shift, and go to state 44
    STRING   shift, and go to state 45

    DATA_TYPE  go to state 46


state 26

   42 VAR_DECLARE: VAR ID ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 47
    VALUE                go to state 40


state 27

   43 VAR_DECLARE: VAR ID ':' . DATA_TYPE
   44            | VAR ID ':' . DATA_TYPE ASSIGN EXPR
   45            | VAR ID ':' . DATA_TYPE '[' INT_VALUE ']'

    BOOLEAN  shift, and go to state 41
    CHAR     shift, and go to state 42
    FLOAT    shift, and go to state 43
    INT      shift, and go to state 44
    STRING   shift, and go to state 45

    DATA_TYPE  go to state 48


state 28

    4 FUNCTION: DEF ID @2 '(' . ARGS ')' FUNCTION_OPTIONAL BLOCK

    ID  shift, and go to state 49

    $default  reduce using rule 11 (ARGS)

    ARGS  go to state 50
    ARG   go to state 51


state 29

   74 VALUE: BOOL_VALUE .

    $default  reduce using rule 74 (VALUE)


state 30

   73 VALUE: INT_VALUE .

    $default  reduce using rule 73 (VALUE)


state 31

   72 VALUE: STRING_VALUE .

    $default  reduce using rule 72 (VALUE)


state 32

   75 VALUE: FLOAT_VALUE .

    $default  reduce using rule 75 (VALUE)


state 33

    7 FUNCTION_INVOCATION: ID . '(' COMMA_SEP_EXPR ')'
   48 EXPR: ID .
   65     | ID . '[' EXPR ']'

    '('  shift, and go to state 52
    '['  shift, and go to state 53

    '('       [reduce using rule 48 (EXPR)]
    $default  reduce using rule 48 (EXPR)


state 34

   76 VALUE: CHAR_VALUE .

    $default  reduce using rule 76 (VALUE)


state 35

   64 EXPR: NOT . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 54
    VALUE                go to state 40


state 36

   49 EXPR: '-' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 55
    VALUE                go to state 40


state 37

   47 EXPR: '(' . EXPR ')'

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 56
    VALUE                go to state 40


state 38

   50 EXPR: FUNCTION_INVOCATION .

    $default  reduce using rule 50 (EXPR)


state 39

   40 VAL_DECLARE: VAL ID ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 40 (VAL_DECLARE)]
    $default  reduce using rule 40 (VAL_DECLARE)


state 40

   66 EXPR: VALUE .

    $default  reduce using rule 66 (EXPR)


state 41

   70 DATA_TYPE: BOOLEAN .

    $default  reduce using rule 70 (DATA_TYPE)


state 42

   67 DATA_TYPE: CHAR .

    $default  reduce using rule 67 (DATA_TYPE)


state 43

   71 DATA_TYPE: FLOAT .

    $default  reduce using rule 71 (DATA_TYPE)


state 44

   69 DATA_TYPE: INT .

    $default  reduce using rule 69 (DATA_TYPE)


state 45

   68 DATA_TYPE: STRING .

    $default  reduce using rule 68 (DATA_TYPE)


state 46

   41 VAL_DECLARE: VAL ID ':' DATA_TYPE . ASSIGN EXPR

    ASSIGN  shift, and go to state 70


state 47

   42 VAR_DECLARE: VAR ID ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 42 (VAR_DECLARE)]
    $default  reduce using rule 42 (VAR_DECLARE)


state 48

   43 VAR_DECLARE: VAR ID ':' DATA_TYPE .
   44            | VAR ID ':' DATA_TYPE . ASSIGN EXPR
   45            | VAR ID ':' DATA_TYPE . '[' INT_VALUE ']'

    ASSIGN  shift, and go to state 71
    '['     shift, and go to state 72

    $default  reduce using rule 43 (VAR_DECLARE)


state 49

   14 ARG: ID . ':' DATA_TYPE

    ':'  shift, and go to state 73


state 50

    4 FUNCTION: DEF ID @2 '(' ARGS . ')' FUNCTION_OPTIONAL BLOCK

    ')'  shift, and go to state 74


state 51

   12 ARGS: ARG . ',' ARGS
   13     | ARG .

    ','  shift, and go to state 75

    $default  reduce using rule 13 (ARGS)


state 52

    7 FUNCTION_INVOCATION: ID '(' . COMMA_SEP_EXPR ')'

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    $default  reduce using rule 8 (COMMA_SEP_EXPR)

    FUNCTION_INVOCATION  go to state 38
    COMMA_SEP_EXPR       go to state 76
    EXPR                 go to state 77
    VALUE                go to state 40


state 53

   65 EXPR: ID '[' . EXPR ']'

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 78
    VALUE                go to state 40


state 54

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   64     | NOT EXPR .

    NE   shift, and go to state 59
    GE   shift, and go to state 60
    GT   shift, and go to state 61
    EQ   shift, and go to state 62
    LE   shift, and go to state 63
    LT   shift, and go to state 64
    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 64 (EXPR)


state 55

   49 EXPR: '-' EXPR .
   51     | EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    $default  reduce using rule 49 (EXPR)


state 56

   47 EXPR: '(' EXPR . ')'
   51     | EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ')'     shift, and go to state 79


state 57

   56 EXPR: EXPR OR_OP . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 80
    VALUE                go to state 40


state 58

   57 EXPR: EXPR AND_OP . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 81
    VALUE                go to state 40


state 59

   63 EXPR: EXPR NE . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 82
    VALUE                go to state 40


state 60

   62 EXPR: EXPR GE . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 83
    VALUE                go to state 40


state 61

   61 EXPR: EXPR GT . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 84
    VALUE                go to state 40


state 62

   60 EXPR: EXPR EQ . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 85
    VALUE                go to state 40


state 63

   59 EXPR: EXPR LE . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 86
    VALUE                go to state 40


state 64

   58 EXPR: EXPR LT . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 87
    VALUE                go to state 40


state 65

   51 EXPR: EXPR '+' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 88
    VALUE                go to state 40


state 66

   52 EXPR: EXPR '-' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 89
    VALUE                go to state 40


state 67

   53 EXPR: EXPR '*' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 90
    VALUE                go to state 40


state 68

   54 EXPR: EXPR '/' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 91
    VALUE                go to state 40


state 69

   55 EXPR: EXPR '%' . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 92
    VALUE                go to state 40


state 70

   41 VAL_DECLARE: VAL ID ':' DATA_TYPE ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 93
    VALUE                go to state 40


state 71

   44 VAR_DECLARE: VAR ID ':' DATA_TYPE ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 94
    VALUE                go to state 40


state 72

   45 VAR_DECLARE: VAR ID ':' DATA_TYPE '[' . INT_VALUE ']'

    INT_VALUE  shift, and go to state 95


state 73

   14 ARG: ID ':' . DATA_TYPE

    BOOLEAN  shift, and go to state 41
    CHAR     shift, and go to state 42
    FLOAT    shift, and go to state 43
    INT      shift, and go to state 44
    STRING   shift, and go to state 45

    DATA_TYPE  go to state 96


state 74

    4 FUNCTION: DEF ID @2 '(' ARGS ')' . FUNCTION_OPTIONAL BLOCK

    ':'  shift, and go to state 97

    $default  reduce using rule 5 (FUNCTION_OPTIONAL)

    FUNCTION_OPTIONAL  go to state 98


state 75

   12 ARGS: ARG ',' . ARGS

    ID  shift, and go to state 49

    $default  reduce using rule 11 (ARGS)

    ARGS  go to state 99
    ARG   go to state 51


state 76

    7 FUNCTION_INVOCATION: ID '(' COMMA_SEP_EXPR . ')'

    ')'  shift, and go to state 100


state 77

    9 COMMA_SEP_EXPR: EXPR . ',' COMMA_SEP_EXPR
   10               | EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ','     shift, and go to state 101

    $default  reduce using rule 10 (COMMA_SEP_EXPR)


state 78

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   65     | ID '[' EXPR . ']'

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ']'     shift, and go to state 102


state 79

   47 EXPR: '(' EXPR ')' .

    $default  reduce using rule 47 (EXPR)


state 80

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   56     | EXPR OR_OP EXPR .
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    $default  reduce using rule 56 (EXPR)


state 81

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   57     | EXPR AND_OP EXPR .
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    NE   shift, and go to state 59
    GE   shift, and go to state 60
    GT   shift, and go to state 61
    EQ   shift, and go to state 62
    LE   shift, and go to state 63
    LT   shift, and go to state 64
    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 57 (EXPR)


state 82

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   63     | EXPR NE EXPR .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 63 (EXPR)


state 83

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   62     | EXPR GE EXPR .
   63     | EXPR . NE EXPR

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 62 (EXPR)


state 84

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   61     | EXPR GT EXPR .
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 61 (EXPR)


state 85

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   60     | EXPR EQ EXPR .
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 60 (EXPR)


state 86

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   59     | EXPR LE EXPR .
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 59 (EXPR)


state 87

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   58     | EXPR LT EXPR .
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 58 (EXPR)


state 88

   51 EXPR: EXPR . '+' EXPR
   51     | EXPR '+' EXPR .
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 51 (EXPR)


state 89

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   52     | EXPR '-' EXPR .
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 52 (EXPR)


state 90

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   53     | EXPR '*' EXPR .
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    $default  reduce using rule 53 (EXPR)


state 91

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   54     | EXPR '/' EXPR .
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    $default  reduce using rule 54 (EXPR)


state 92

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   55     | EXPR '%' EXPR .
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    $default  reduce using rule 55 (EXPR)


state 93

   41 VAL_DECLARE: VAL ID ':' DATA_TYPE ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 41 (VAL_DECLARE)]
    $default  reduce using rule 41 (VAL_DECLARE)


state 94

   44 VAR_DECLARE: VAR ID ':' DATA_TYPE ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 44 (VAR_DECLARE)]
    $default  reduce using rule 44 (VAR_DECLARE)


state 95

   45 VAR_DECLARE: VAR ID ':' DATA_TYPE '[' INT_VALUE . ']'

    ']'  shift, and go to state 103


state 96

   14 ARG: ID ':' DATA_TYPE .

    $default  reduce using rule 14 (ARG)


state 97

    6 FUNCTION_OPTIONAL: ':' . DATA_TYPE

    BOOLEAN  shift, and go to state 41
    CHAR     shift, and go to state 42
    FLOAT    shift, and go to state 43
    INT      shift, and go to state 44
    STRING   shift, and go to state 45

    DATA_TYPE  go to state 104


state 98

    4 FUNCTION: DEF ID @2 '(' ARGS ')' FUNCTION_OPTIONAL . BLOCK

    '{'  shift, and go to state 105

    BLOCK  go to state 106


state 99

   12 ARGS: ARG ',' ARGS .

    $default  reduce using rule 12 (ARGS)


state 100

    7 FUNCTION_INVOCATION: ID '(' COMMA_SEP_EXPR ')' .

    $default  reduce using rule 7 (FUNCTION_INVOCATION)


state 101

    9 COMMA_SEP_EXPR: EXPR ',' . COMMA_SEP_EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    $default  reduce using rule 8 (COMMA_SEP_EXPR)

    FUNCTION_INVOCATION  go to state 38
    COMMA_SEP_EXPR       go to state 107
    EXPR                 go to state 77
    VALUE                go to state 40


state 102

   65 EXPR: ID '[' EXPR ']' .

    $default  reduce using rule 65 (EXPR)


state 103

   45 VAR_DECLARE: VAR ID ':' DATA_TYPE '[' INT_VALUE ']' .

    $default  reduce using rule 45 (VAR_DECLARE)


state 104

    6 FUNCTION_OPTIONAL: ':' DATA_TYPE .

    $default  reduce using rule 6 (FUNCTION_OPTIONAL)


state 105

   34 BLOCK: '{' . @3 STMTS '}'

    $default  reduce using rule 33 (@3)

    @3  go to state 108


state 106

    4 FUNCTION: DEF ID @2 '(' ARGS ')' FUNCTION_OPTIONAL BLOCK .

    $default  reduce using rule 4 (FUNCTION)


state 107

    9 COMMA_SEP_EXPR: EXPR ',' COMMA_SEP_EXPR .

    $default  reduce using rule 9 (COMMA_SEP_EXPR)


state 108

   34 BLOCK: '{' @3 . STMTS '}'

    FOR           shift, and go to state 109
    IF            shift, and go to state 110
    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    WHILE         shift, and go to state 115
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37
    '{'           shift, and go to state 105

    $default  reduce using rule 17 (STMTS)

    FUNCTION_INVOCATION  go to state 38
    STMTS                go to state 117
    STMT                 go to state 118
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 120
    BLOCK                go to state 121
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40
    CONDITIONAL_STMT     go to state 123
    IF_STMT              go to state 124
    LOOP_STMT            go to state 125
    WHILE_STMT           go to state 126
    FOR_STMT             go to state 127


state 109

   93 FOR_STMT: FOR . '(' ID LT '-' EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR . '(' ID LT '-' EXPR TO EXPR ')' BLOCK

    '('  shift, and go to state 128


state 110

   80 IF_STMT: IF . '(' EXPR ')' @5 SIMPLE_STMT
   81        | IF . '(' EXPR ')' BLOCK

    '('  shift, and go to state 129


state 111

   29 SIMPLE_STMT: PRINT . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 130
    VALUE                go to state 40


state 112

   30 SIMPLE_STMT: PRINTLN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 131
    VALUE                go to state 40


state 113

   31 SIMPLE_STMT: READ . ID

    ID  shift, and go to state 132


state 114

   25 SIMPLE_STMT: RETURN .
   26            | RETURN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    BOOL_VALUE    [reduce using rule 25 (SIMPLE_STMT)]
    INT_VALUE     [reduce using rule 25 (SIMPLE_STMT)]
    STRING_VALUE  [reduce using rule 25 (SIMPLE_STMT)]
    FLOAT_VALUE   [reduce using rule 25 (SIMPLE_STMT)]
    ID            [reduce using rule 25 (SIMPLE_STMT)]
    CHAR_VALUE    [reduce using rule 25 (SIMPLE_STMT)]
    NOT           [reduce using rule 25 (SIMPLE_STMT)]
    '-'           [reduce using rule 25 (SIMPLE_STMT)]
    '('           [reduce using rule 25 (SIMPLE_STMT)]
    $default      reduce using rule 25 (SIMPLE_STMT)

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 133
    VALUE                go to state 40


state 115

   90 WHILE_STMT: WHILE . '(' EXPR ')' @7 SIMPLE_STMT
   91           | WHILE . '(' EXPR ')' BLOCK

    '('  shift, and go to state 134


state 116

    7 FUNCTION_INVOCATION: ID . '(' COMMA_SEP_EXPR ')'
   27 SIMPLE_STMT: ID . ASSIGN EXPR
   28            | ID . '[' EXPR ']' ASSIGN EXPR
   48 EXPR: ID .
   65     | ID . '[' EXPR ']'

    ASSIGN  shift, and go to state 135
    '('     shift, and go to state 52
    '['     shift, and go to state 136

    '('       [reduce using rule 48 (EXPR)]
    $default  reduce using rule 48 (EXPR)


state 117

   34 BLOCK: '{' @3 STMTS . '}'

    '}'  shift, and go to state 137


state 118

   15 STMTS: STMT .
   16      | STMT . STMTS

    FOR           shift, and go to state 109
    IF            shift, and go to state 110
    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    WHILE         shift, and go to state 115
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37
    '{'           shift, and go to state 105

    '}'       reduce using rule 15 (STMTS)
    '}'       [reduce using rule 17 (STMTS)]
    $default  reduce using rule 15 (STMTS)

    FUNCTION_INVOCATION  go to state 38
    STMTS                go to state 138
    STMT                 go to state 118
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 120
    BLOCK                go to state 121
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40
    CONDITIONAL_STMT     go to state 123
    IF_STMT              go to state 124
    LOOP_STMT            go to state 125
    WHILE_STMT           go to state 126
    FOR_STMT             go to state 127


state 119

   24 SIMPLE_STMT: V_DECLARE .

    $default  reduce using rule 24 (SIMPLE_STMT)


state 120

   18 STMT: SIMPLE_STMT .

    $default  reduce using rule 18 (STMT)


state 121

   19 STMT: BLOCK .

    $default  reduce using rule 19 (STMT)


state 122

   32 SIMPLE_STMT: EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 32 (SIMPLE_STMT)]
    $default  reduce using rule 32 (SIMPLE_STMT)


state 123

   20 STMT: CONDITIONAL_STMT .

    $default  reduce using rule 20 (STMT)


state 124

   77 CONDITIONAL_STMT: IF_STMT .
   78                 | IF_STMT . ELSE_STMT

    ELSE  shift, and go to state 139

    $default  reduce using rule 77 (CONDITIONAL_STMT)

    ELSE_STMT  go to state 140


state 125

   21 STMT: LOOP_STMT .

    $default  reduce using rule 21 (STMT)


state 126

   87 LOOP_STMT: WHILE_STMT .

    $default  reduce using rule 87 (LOOP_STMT)


state 127

   88 LOOP_STMT: FOR_STMT .

    $default  reduce using rule 88 (LOOP_STMT)


state 128

   93 FOR_STMT: FOR '(' . ID LT '-' EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' . ID LT '-' EXPR TO EXPR ')' BLOCK

    ID  shift, and go to state 141


state 129

   80 IF_STMT: IF '(' . EXPR ')' @5 SIMPLE_STMT
   81        | IF '(' . EXPR ')' BLOCK

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 142
    VALUE                go to state 40


state 130

   29 SIMPLE_STMT: PRINT EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 29 (SIMPLE_STMT)]
    $default  reduce using rule 29 (SIMPLE_STMT)


state 131

   30 SIMPLE_STMT: PRINTLN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 30 (SIMPLE_STMT)]
    $default  reduce using rule 30 (SIMPLE_STMT)


state 132

   31 SIMPLE_STMT: READ ID .

    $default  reduce using rule 31 (SIMPLE_STMT)


state 133

   26 SIMPLE_STMT: RETURN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 26 (SIMPLE_STMT)]
    $default  reduce using rule 26 (SIMPLE_STMT)


state 134

   90 WHILE_STMT: WHILE '(' . EXPR ')' @7 SIMPLE_STMT
   91           | WHILE '(' . EXPR ')' BLOCK

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 143
    VALUE                go to state 40


state 135

   27 SIMPLE_STMT: ID ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 144
    VALUE                go to state 40


state 136

   28 SIMPLE_STMT: ID '[' . EXPR ']' ASSIGN EXPR
   65 EXPR: ID '[' . EXPR ']'

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 145
    VALUE                go to state 40


state 137

   34 BLOCK: '{' @3 STMTS '}' .

    $default  reduce using rule 34 (BLOCK)


state 138

   16 STMTS: STMT STMTS .

    $default  reduce using rule 16 (STMTS)


state 139

   83 ELSE_STMT: ELSE . @6 SIMPLE_STMT
   84          | ELSE . BLOCK
   85          | ELSE . IF_STMT
   86          | ELSE . IF_STMT ELSE_STMT

    IF   shift, and go to state 110
    '{'  shift, and go to state 105

    $default  reduce using rule 82 (@6)

    BLOCK    go to state 146
    IF_STMT  go to state 147
    @6       go to state 148


state 140

   78 CONDITIONAL_STMT: IF_STMT ELSE_STMT .

    $default  reduce using rule 78 (CONDITIONAL_STMT)


state 141

   93 FOR_STMT: FOR '(' ID . LT '-' EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID . LT '-' EXPR TO EXPR ')' BLOCK

    LT  shift, and go to state 149


state 142

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   80 IF_STMT: IF '(' EXPR . ')' @5 SIMPLE_STMT
   81        | IF '(' EXPR . ')' BLOCK

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ')'     shift, and go to state 150


state 143

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   90 WHILE_STMT: WHILE '(' EXPR . ')' @7 SIMPLE_STMT
   91           | WHILE '(' EXPR . ')' BLOCK

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ')'     shift, and go to state 151


state 144

   27 SIMPLE_STMT: ID ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 27 (SIMPLE_STMT)]
    $default  reduce using rule 27 (SIMPLE_STMT)


state 145

   28 SIMPLE_STMT: ID '[' EXPR . ']' ASSIGN EXPR
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   65     | ID '[' EXPR . ']'

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ']'     shift, and go to state 152


state 146

   84 ELSE_STMT: ELSE BLOCK .

    $default  reduce using rule 84 (ELSE_STMT)


state 147

   85 ELSE_STMT: ELSE IF_STMT .
   86          | ELSE IF_STMT . ELSE_STMT

    ELSE  shift, and go to state 139

    $default  reduce using rule 85 (ELSE_STMT)

    ELSE_STMT  go to state 153


state 148

   83 ELSE_STMT: ELSE @6 . SIMPLE_STMT

    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 154
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40


state 149

   93 FOR_STMT: FOR '(' ID LT . '-' EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT . '-' EXPR TO EXPR ')' BLOCK

    '-'  shift, and go to state 155


state 150

   80 IF_STMT: IF '(' EXPR ')' . @5 SIMPLE_STMT
   81        | IF '(' EXPR ')' . BLOCK

    '{'  shift, and go to state 105

    $default  reduce using rule 79 (@5)

    BLOCK  go to state 156
    @5     go to state 157


state 151

   90 WHILE_STMT: WHILE '(' EXPR ')' . @7 SIMPLE_STMT
   91           | WHILE '(' EXPR ')' . BLOCK

    '{'  shift, and go to state 105

    $default  reduce using rule 89 (@7)

    BLOCK  go to state 158
    @7     go to state 159


state 152

   28 SIMPLE_STMT: ID '[' EXPR ']' . ASSIGN EXPR
   65 EXPR: ID '[' EXPR ']' .

    ASSIGN  shift, and go to state 160

    $default  reduce using rule 65 (EXPR)


state 153

   86 ELSE_STMT: ELSE IF_STMT ELSE_STMT .

    $default  reduce using rule 86 (ELSE_STMT)


state 154

   83 ELSE_STMT: ELSE @6 SIMPLE_STMT .

    $default  reduce using rule 83 (ELSE_STMT)


state 155

   93 FOR_STMT: FOR '(' ID LT '-' . EXPR TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' . EXPR TO EXPR ')' BLOCK

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 161
    VALUE                go to state 40


state 156

   81 IF_STMT: IF '(' EXPR ')' BLOCK .

    $default  reduce using rule 81 (IF_STMT)


state 157

   80 IF_STMT: IF '(' EXPR ')' @5 . SIMPLE_STMT

    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 162
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40


state 158

   91 WHILE_STMT: WHILE '(' EXPR ')' BLOCK .

    $default  reduce using rule 91 (WHILE_STMT)


state 159

   90 WHILE_STMT: WHILE '(' EXPR ')' @7 . SIMPLE_STMT

    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 163
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40


state 160

   28 SIMPLE_STMT: ID '[' EXPR ']' ASSIGN . EXPR

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 164
    VALUE                go to state 40


state 161

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   93 FOR_STMT: FOR '(' ID LT '-' EXPR . TO EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' EXPR . TO EXPR ')' BLOCK

    TO      shift, and go to state 165
    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69


state 162

   80 IF_STMT: IF '(' EXPR ')' @5 SIMPLE_STMT .

    $default  reduce using rule 80 (IF_STMT)


state 163

   90 WHILE_STMT: WHILE '(' EXPR ')' @7 SIMPLE_STMT .

    $default  reduce using rule 90 (WHILE_STMT)


state 164

   28 SIMPLE_STMT: ID '[' EXPR ']' ASSIGN EXPR .
   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69

    '-'       [reduce using rule 28 (SIMPLE_STMT)]
    $default  reduce using rule 28 (SIMPLE_STMT)


state 165

   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO . EXPR ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' EXPR TO . EXPR ')' BLOCK

    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 33
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    EXPR                 go to state 166
    VALUE                go to state 40


state 166

   51 EXPR: EXPR . '+' EXPR
   52     | EXPR . '-' EXPR
   53     | EXPR . '*' EXPR
   54     | EXPR . '/' EXPR
   55     | EXPR . '%' EXPR
   56     | EXPR . OR_OP EXPR
   57     | EXPR . AND_OP EXPR
   58     | EXPR . LT EXPR
   59     | EXPR . LE EXPR
   60     | EXPR . EQ EXPR
   61     | EXPR . GT EXPR
   62     | EXPR . GE EXPR
   63     | EXPR . NE EXPR
   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR . ')' @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' EXPR TO EXPR . ')' BLOCK

    OR_OP   shift, and go to state 57
    AND_OP  shift, and go to state 58
    NE      shift, and go to state 59
    GE      shift, and go to state 60
    GT      shift, and go to state 61
    EQ      shift, and go to state 62
    LE      shift, and go to state 63
    LT      shift, and go to state 64
    '+'     shift, and go to state 65
    '-'     shift, and go to state 66
    '*'     shift, and go to state 67
    '/'     shift, and go to state 68
    '%'     shift, and go to state 69
    ')'     shift, and go to state 167


state 167

   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR ')' . @8 SIMPLE_STMT
   94         | FOR '(' ID LT '-' EXPR TO EXPR ')' . BLOCK

    '{'  shift, and go to state 105

    $default  reduce using rule 92 (@8)

    BLOCK  go to state 168
    @8     go to state 169


state 168

   94 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR ')' BLOCK .

    $default  reduce using rule 94 (FOR_STMT)


state 169

   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR ')' @8 . SIMPLE_STMT

    PRINT         shift, and go to state 111
    PRINTLN       shift, and go to state 112
    READ          shift, and go to state 113
    RETURN        shift, and go to state 114
    VAL           shift, and go to state 10
    VAR           shift, and go to state 11
    BOOL_VALUE    shift, and go to state 29
    INT_VALUE     shift, and go to state 30
    STRING_VALUE  shift, and go to state 31
    FLOAT_VALUE   shift, and go to state 32
    ID            shift, and go to state 116
    CHAR_VALUE    shift, and go to state 34
    NOT           shift, and go to state 35
    '-'           shift, and go to state 36
    '('           shift, and go to state 37

    FUNCTION_INVOCATION  go to state 38
    V_DECLARE            go to state 119
    SIMPLE_STMT          go to state 170
    VAL_DECLARE          go to state 15
    VAR_DECLARE          go to state 16
    EXPR                 go to state 122
    VALUE                go to state 40


state 170

   93 FOR_STMT: FOR '(' ID LT '-' EXPR TO EXPR ')' @8 SIMPLE_STMT .

    $default  reduce using rule 93 (FOR_STMT)
